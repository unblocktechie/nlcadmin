{"version":3,"sources":["components/Main.js","components/Navbar.js","components/App.js","serviceWorker.js","index.js"],"names":["Main","mintAdmin","swapAdmin","_useState","useState","_useState2","Object","slicedToArray","account","setAccount","_useState3","_useState4","nlc","setNLC","_useState5","_useState6","supply","setSupply","_useState7","_useState8","loading","setLoading","_useState9","_useState10","minted","setMinted","mintAmount","multiTransfer","_useState11","id","amount","tx","_useState12","dummyData","setDummyData","_loadWeb","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","window","ethereum","web3","Web3","enable","currentProvider","alert","stop","apply","this","arguments","_loadBlockchainData","_callee2","networkId","nlcData","nlcd","totalSupply","_context2","eth","getAccounts","then","res","catch","err","net","getId","sent","NLC","networks","Contract","abi","address","methods","call","sendTokens","event","indexed","target","value","NLCAmount","transfer","send","from","once","confirmation","prevData","filter","items","index","on","error","useEffect","loadWeb3","loadBlockchainData","react_default","createElement","className","Segment","Label","Loader","active","inline","length","Fragment","Button","onClick","mintSupplyToSwapAdmin","color","size","fluid","Table","celled","Header","Row","HeaderCell","transferToMultipleAccounts","Body","map","item","swapAmount","push","recipient","key","Cell","Navbar","Menu","secondary","MenuItem","src","alt","width","App","components_Navbar","components_Main","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7743218a.chunk.js","sourcesContent":["import React,{ useState, useEffect } from \"react\";\r\nimport { Button, Label, Segment, Table, Loader } from 'semantic-ui-react';\r\nimport NLC from '../abis/NLC.json';\r\nimport Web3 from 'web3';\r\n\r\nfunction Main(){\r\n\r\n  const mintAdmin = \"0xA84D9ea736B6f48705EfE68689baE72F86897A41\";  //ropsten test net\r\n  const swapAdmin = \"0x55A294336666eD7572C8De527Fc2ED1F46b30edf\";  //ropsten test net\r\n\r\n  // const mintAdmin = \"0x8A0351e2f224ba672d848cCd39ac93Fe4264D3Eb\";  //local\r\n  // const swapAdmin = \"0x757e4F76AC7E7173996A0dD41506e4EE111B9dBD\";  //local\r\n\r\n  const [account, setAccount] = useState(\"\");\r\n  const [nlc, setNLC] = useState({});\r\n  const [supply, setSupply] = useState();\r\n  const [loading,setLoading] = useState(false);\r\n  const [minted,setMinted] = useState(false);\r\n  let mintAmount = 0;\r\n  let multiTransfer = [];\r\n  \r\n  const [dummyData,setDummyData] = useState([{id:\"0x50e5b7ab2E22e51C6E465cF27803BeBE1432c7d2\",amount:2467,tx:\"0xsgegtdbetdbetdgdtdtte\"},\r\n                   {id:\"0xe35f331F4C36B01810b1D42dfA715Eb1A74940e8\",amount:345,tx:\"0xsgegtdbetdbvahvahajsh\"},\r\n                   {id:\"0xD5082813CA44F9Bc2e2DE312Da9FB18dAbab895f\",amount:12670,tx:\"0xsgegtdbetsbdjsbcsdc\"},\r\n                   {id:\"0x9EF47470C2168c039211Adaf32c4b7E3fbc4Ea22\",amount:4574374,tx:\"0xsgegtdbetbcsdjbcdsj\"},\r\n                   {id:\"0x4513547A5CFF327C42a6D77559F89c4D70bd661B\",amount:32535,tx:\"0xsckjscdbetdckjckdsdsk\"},\r\n                  ]);\r\n\r\n  async function loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n    }\r\n  }\r\n\r\n  async function loadBlockchainData(){\r\n    const web3 = window.web3;\r\n    if(typeof (web3) != 'undefined' && web3 != null){ \r\n        web3.eth.getAccounts()\r\n        .then(res=>{\r\n            setAccount(res[0]);\r\n        })\r\n        .catch(err=>{\r\n            window.alert(\"please select your ethereum account\");\r\n        }) \r\n    }\r\n\r\n    const networkId = await web3.eth.net.getId();\r\n\r\n        const nlcData = NLC.networks[networkId];\r\n            \r\n            if(nlcData) {\r\n                const nlcd = new web3.eth.Contract(NLC.abi, nlcData.address);\r\n                setNLC(nlcd);\r\n                \r\n                const totalSupply = await nlcd.methods.totalSupply().call();\r\n                let amount = totalSupply/100000000;\r\n                setSupply(amount);\r\n\r\n            } else {\r\n                window.alert('NLC contract not deployed to detected network.');\r\n            }  \r\n           \r\n  }    \r\n  \r\n  useEffect(() => {\r\n    loadWeb3();  \r\n    loadBlockchainData();\r\n  },[])\r\n\r\n  function mintSupply(){\r\n\r\n    if(mintAdmin === account){\r\n      setLoading(true);\r\n\r\n      //To mint 1 NLC token, multiply amount with 10^8 \r\n\r\n      const NLCAmount = mintAmount*100000000;  \r\n      nlc.methods.mintSupplyToSwapAdmin(NLCAmount).send({from:account})\r\n      .once('confirmation', (confirmation) => {\r\n        setLoading(false);\r\n        setMinted(true);\r\n        window.alert(\"transaction successful.\");\r\n      })\r\n      .on('error', (error) => {\r\n          window.alert(\"Transaction failed. Try again!\");\r\n          setLoading(false);\r\n      });\r\n    }else{\r\n      window.alert(\"Please switch to the mint admin's account\");\r\n    }  \r\n  }\r\n\r\n  function sendTokens(event){\r\n    const indexed = event.target.value;\r\n    if(swapAdmin === account){\r\n      setLoading(true);\r\n\r\n      //To send 1 NLC token, multiply amount with 10^8 \r\n\r\n      const NLCAmount = dummyData[indexed].amount*100000000;  \r\n      nlc.methods.transfer(dummyData[indexed].id,NLCAmount).send({from:account})\r\n      .once('confirmation', (confirmation) => {\r\n        setLoading(false);\r\n        window.alert(\"transaction successful.\");\r\n\r\n        setDummyData(prevData => {\r\n          return prevData.filter((items, index) => {\r\n            return items.tx !== dummyData[indexed].tx;\r\n          });\r\n        });\r\n\r\n      })\r\n      .on('error', (error) => {\r\n          window.alert(\"Transaction failed. Try again!\");\r\n          setLoading(false);\r\n      });\r\n    }else{\r\n      window.alert(\"Please switch to the swap admin's account\");\r\n    }  \r\n  }\r\n\r\n  function sendTokensAll(){\r\n    \r\n    if(swapAdmin === account){\r\n      setLoading(true);\r\n\r\n      //Maximum 25 transfers are permissible at a time\r\n\r\n      if(multiTransfer.length <= 25){\r\n        nlc.methods.transferToMultipleAccounts(multiTransfer).send({from:account})\r\n        .once('confirmation', (confirmation) => {\r\n          setLoading(false);\r\n          window.alert(\"transaction successful.\");\r\n\r\n          setDummyData([]);\r\n\r\n        })\r\n        .on('error', (error) => {\r\n            window.alert(\"Transaction failed. Try again!\");\r\n            setLoading(false);\r\n        });\r\n      }  \r\n    }else{\r\n      window.alert(\"Please switch to the swap admin's account\");\r\n    }  \r\n  }\r\n\r\n  return(\r\n    <div className=\"main\">\r\n        \r\n      <Segment className=\"wrap\">\r\n        <Label><h1>{account}</h1></Label>\r\n        <h2><b>Total NLC Supply : </b> {supply} </h2>\r\n        <p><b>Mint Admin Address :</b> {mintAdmin} </p>\r\n        <p><b>Swap Admin Address :</b> {swapAdmin} </p>\r\n      </Segment>\r\n\r\n      <Segment>\r\n        \r\n        {loading?<Loader active inline='centered' />:(dummyData.length!==0)?\r\n        <>\r\n        {(!minted)&&(mintAdmin===account)&& \r\n        <Button onClick={mintSupply} color=\"red\" size=\"large\" fluid>Mint All at Once</Button>\r\n        }\r\n        <Table celled size=\"large\">\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell>User ID(Address)</Table.HeaderCell>\r\n              <Table.HeaderCell>Swap Amount</Table.HeaderCell>\r\n              <Table.HeaderCell>Transaction ID</Table.HeaderCell>\r\n              <Table.HeaderCell>\r\n                <Button onClick={sendTokensAll} color=\"black\" size=\"large\" >Send All</Button>\r\n              </Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n\r\n          <Table.Body>\r\n            {dummyData.map((item, index) => {\r\n              mintAmount += item.amount;\r\n              let swapAmount = item.amount*100000000; \r\n              multiTransfer.push({recipient:item.id,amount:swapAmount});\r\n              return (\r\n                <Table.Row key={index}>\r\n                  <Table.Cell>{item.id}</Table.Cell>\r\n                  <Table.Cell>{item.amount}</Table.Cell>\r\n                  <Table.Cell>{item.tx}</Table.Cell>\r\n                  <Table.Cell>\r\n                    <Button onClick={sendTokens} value={index}\r\n                      color=\"grey\" size=\"small\" \r\n                    >Send</Button>\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n              );\r\n            })}    \r\n          </Table.Body>\r\n        </Table>\r\n        </>\r\n        :<p>No Records Found</p>\r\n        }\r\n      </Segment>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { Menu, MenuItem} from \"semantic-ui-react\";\r\n\r\nfunction Navbar(){\r\n  return(\r\n    <header>\r\n      <Menu secondary>\r\n      <MenuItem>\r\n        <div className=\"inline\">\r\n        <img src=\"./images/NLClogo90.png\" alt=\"quote\" width=\"30\" />\r\n        </div>\r\n        <div className=\"inline\">\r\n        <h1>No Limit Coin</h1>\r\n        </div>\r\n        </MenuItem>\r\n      </Menu>  \r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport Main from './Main';\r\nimport Navbar from './Navbar';\r\n\r\nfunction App(){\r\n\r\n  return(\r\n    <>\r\n    <Navbar />\r\n    <Main />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './components/App';\r\n//import { HashRouter } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}